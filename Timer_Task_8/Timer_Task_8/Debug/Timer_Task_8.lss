
Timer_Task_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0b  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000941  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000949  00000000  00000000  0000300e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_7>
  20:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_8>
  24:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_9>
  28:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_10>
  2c:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_11>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	d0 00       	.word	0x00d0	; ????
  56:	e9 00       	.word	0x00e9	; ????
  58:	02 01       	movw	r0, r4
  5a:	1b 01       	movw	r2, r22
  5c:	33 01       	movw	r6, r6
  5e:	33 01       	movw	r6, r6
  60:	33 01       	movw	r6, r6
  62:	33 01       	movw	r6, r6
  64:	33 01       	movw	r6, r6
  66:	33 01       	movw	r6, r6
  68:	33 01       	movw	r6, r6
  6a:	33 01       	movw	r6, r6
  6c:	33 01       	movw	r6, r6
  6e:	33 01       	movw	r6, r6
  70:	33 01       	movw	r6, r6
  72:	33 01       	movw	r6, r6
  74:	33 01       	movw	r6, r6
  76:	33 01       	movw	r6, r6
  78:	33 01       	movw	r6, r6
  7a:	33 01       	movw	r6, r6
  7c:	33 01       	movw	r6, r6
  7e:	33 01       	movw	r6, r6
  80:	33 01       	movw	r6, r6
  82:	33 01       	movw	r6, r6
  84:	33 01       	movw	r6, r6
  86:	33 01       	movw	r6, r6
  88:	33 01       	movw	r6, r6
  8a:	33 01       	movw	r6, r6
  8c:	33 01       	movw	r6, r6
  8e:	33 01       	movw	r6, r6
  90:	33 01       	movw	r6, r6
  92:	33 01       	movw	r6, r6
  94:	d0 00       	.word	0x00d0	; ????
  96:	e9 00       	.word	0x00e9	; ????
  98:	02 01       	movw	r0, r4
  9a:	1b 01       	movw	r2, r22
  9c:	40 01       	movw	r8, r0
  9e:	59 01       	movw	r10, r18
  a0:	72 01       	movw	r14, r4
  a2:	8b 01       	movw	r16, r22
  a4:	a3 01       	movw	r20, r6
  a6:	a3 01       	movw	r20, r6
  a8:	a3 01       	movw	r20, r6
  aa:	a3 01       	movw	r20, r6
  ac:	a3 01       	movw	r20, r6
  ae:	a3 01       	movw	r20, r6
  b0:	a3 01       	movw	r20, r6
  b2:	a3 01       	movw	r20, r6
  b4:	a3 01       	movw	r20, r6
  b6:	a3 01       	movw	r20, r6
  b8:	a3 01       	movw	r20, r6
  ba:	a3 01       	movw	r20, r6
  bc:	a3 01       	movw	r20, r6
  be:	a3 01       	movw	r20, r6
  c0:	a3 01       	movw	r20, r6
  c2:	a3 01       	movw	r20, r6
  c4:	a3 01       	movw	r20, r6
  c6:	a3 01       	movw	r20, r6
  c8:	a3 01       	movw	r20, r6
  ca:	a3 01       	movw	r20, r6
  cc:	a3 01       	movw	r20, r6
  ce:	a3 01       	movw	r20, r6
  d0:	a3 01       	movw	r20, r6
  d2:	a3 01       	movw	r20, r6
  d4:	a3 01       	movw	r20, r6
  d6:	a3 01       	movw	r20, r6
  d8:	a3 01       	movw	r20, r6
  da:	a3 01       	movw	r20, r6
  dc:	40 01       	movw	r8, r0
  de:	59 01       	movw	r10, r18
  e0:	72 01       	movw	r14, r4
  e2:	8b 01       	movw	r16, r22

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a3 36       	cpi	r26, 0x63	; 99
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 86 00 	call	0x10c	; 0x10c <main>
 104:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <main>:
/* define CPU Clock Cycle To 2 MHZ */
#define F_CPU 2000000UL

int main(void)
{
	LED_vinitialize('A',0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 b8 00 	call	0x170	; 0x170 <LED_vinitialize>
	LED_vTurnoff('A',0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 c0 00 	call	0x180	; 0x180 <LED_vTurnoff>
	/* CAll Timer Initialization With 
	* Timer 1 
	* 64 Prescaler
	* Overflow Interrupt
	* Normal Mode */
	TMR_voidInit();
 11c:	0e 94 a4 01 	call	0x348	; 0x348 <TMR_voidInit>
	/* Enable GIE Interrupt */
	TMR_voidEnableGIE();
 120:	0e 94 c9 01 	call	0x392	; 0x392 <TMR_voidEnableGIE>
	/* Set TCNT as 500 ms Delay */
	TMR_s8SetTCNT(49911);/*(2^16(timer resolution))-(.5Sec/(64(Prescaler)/2000000Hz)) = 49911*/
 124:	87 ef       	ldi	r24, 0xF7	; 247
 126:	92 ec       	ldi	r25, 0xC2	; 194
 128:	0e 94 c6 01 	call	0x38c	; 0x38c <TMR_s8SetTCNT>
	/* Set CAll Back Function */
	TMR_voidSetCallBack(LED_voidInterrupt);
 12c:	8b e9       	ldi	r24, 0x9B	; 155
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 cd 01 	call	0x39a	; 0x39a <TMR_voidSetCallBack>
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x28>

00000136 <LED_voidInterrupt>:
/* Global Variable define the State inside the ISR Function */
u8 LED_u8State = 0 ;
void LED_voidInterrupt (void)
{
	/* First State */
	if (LED_u8State == 0 )
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13a:	81 11       	cpse	r24, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <LED_voidInterrupt+0x20>
	{
		/* After 500 ms LOW make Turn on the Led */
		LED_vTurnon('A',0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 bc 00 	call	0x178	; 0x178 <LED_vTurnon>
		/* Make the Variable holds the value for the Next State */
		LED_u8State = 1 ;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		/* Make The TCNT Register holds the value for over flow after 300 ms */
		TMR_s8SetTCNT(56161);/*(2^16(timer resolution))-(.3Sec/(64(Prescaler)/2000000Hz)) = 56161*/
 14c:	81 e6       	ldi	r24, 0x61	; 97
 14e:	9b ed       	ldi	r25, 0xDB	; 219
 150:	0e 94 c6 01 	call	0x38c	; 0x38c <TMR_s8SetTCNT>
 154:	08 95       	ret
	}
	/* Next State */
	else if (LED_u8State==1)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	51 f4       	brne	.+20     	; 0x16e <LED_voidInterrupt+0x38>
	{
		/* Make The TCNT Register holds the value for over flow after 500 ms */
		TMR_s8SetTCNT(49911);/*(2^16(timer resolution))-(.5Sec/(64(Prescaler)/2000000Hz)) = 49911*/
 15a:	87 ef       	ldi	r24, 0xF7	; 247
 15c:	92 ec       	ldi	r25, 0xC2	; 194
 15e:	0e 94 c6 01 	call	0x38c	; 0x38c <TMR_s8SetTCNT>
		/* After 300 ms High make Turn Off the Led */
		LED_vTurnoff('A',0);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 c0 00 	call	0x180	; 0x180 <LED_vTurnoff>
		/* Make the Variable holds the value for the Next State */
		LED_u8State = 0 ;
 16a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 16e:	08 95       	ret

00000170 <LED_vinitialize>:
 *  Author: Ahmed SemSem
 */ 
#include "../Header/LED_driver_ECU.h"

void LED_vinitialize(u8 port, u8 pin){
	GPIO_vsetPIN_DIR(port, pin, OUTPUT);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 c4 00 	call	0x188	; 0x188 <GPIO_vsetPIN_DIR>
 176:	08 95       	ret

00000178 <LED_vTurnon>:
}

//=====================================================================

void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port, pin, HIGH);
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_vwrite_PIN>
 17e:	08 95       	ret

00000180 <LED_vTurnoff>:
}

//=====================================================================

void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port, pin, LOW);
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_vwrite_PIN>
 186:	08 95       	ret

00000188 <GPIO_vsetPIN_DIR>:
//==============================================================================================================

//=================================================PIN==========================================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir){
	switch (portnum){
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	e1 54       	subi	r30, 0x41	; 65
 18e:	f1 09       	sbc	r31, r1
 190:	e4 32       	cpi	r30, 0x24	; 36
 192:	f1 05       	cpc	r31, r1
 194:	08 f0       	brcs	.+2      	; 0x198 <GPIO_vsetPIN_DIR+0x10>
 196:	67 c0       	rjmp	.+206    	; 0x266 <GPIO_vsetPIN_DIR+0xde>
 198:	e6 5d       	subi	r30, 0xD6	; 214
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__tablejump2__>
		case 'A' :
		case 'a' :
			if(dir == 1){
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <GPIO_vsetPIN_DIR+0x32>
				SET_BIT(myDDRA,pinnum);
 1a4:	2a b3       	in	r18, 0x1a	; 26
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_vsetPIN_DIR+0x28>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_vsetPIN_DIR+0x24>
 1b4:	82 2b       	or	r24, r18
 1b6:	8a bb       	out	0x1a, r24	; 26
 1b8:	08 95       	ret
			}else{
				CLR_BIT(myDDRA,pinnum);
 1ba:	2a b3       	in	r18, 0x1a	; 26
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_vsetPIN_DIR+0x3e>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_vsetPIN_DIR+0x3a>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	8a bb       	out	0x1a, r24	; 26
 1d0:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if(dir == 1){
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <GPIO_vsetPIN_DIR+0x64>
				SET_BIT(myDDRB,pinnum);
 1d6:	27 b3       	in	r18, 0x17	; 23
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_vsetPIN_DIR+0x5a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_vsetPIN_DIR+0x56>
 1e6:	82 2b       	or	r24, r18
 1e8:	87 bb       	out	0x17, r24	; 23
 1ea:	08 95       	ret
			}else{
				CLR_BIT(myDDRB,pinnum);
 1ec:	27 b3       	in	r18, 0x17	; 23
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GPIO_vsetPIN_DIR+0x70>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GPIO_vsetPIN_DIR+0x6c>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	87 bb       	out	0x17, r24	; 23
 202:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <GPIO_vsetPIN_DIR+0x96>
				SET_BIT(myDDRC,pinnum);
 208:	24 b3       	in	r18, 0x14	; 20
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <GPIO_vsetPIN_DIR+0x8c>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <GPIO_vsetPIN_DIR+0x88>
 218:	82 2b       	or	r24, r18
 21a:	84 bb       	out	0x14, r24	; 20
 21c:	08 95       	ret
			}else{
				CLR_BIT(myDDRC,pinnum);
 21e:	24 b3       	in	r18, 0x14	; 20
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <GPIO_vsetPIN_DIR+0xa2>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <GPIO_vsetPIN_DIR+0x9e>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	84 bb       	out	0x14, r24	; 20
 234:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <GPIO_vsetPIN_DIR+0xc8>
				SET_BIT(myDDRD,pinnum);
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <GPIO_vsetPIN_DIR+0xbe>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <GPIO_vsetPIN_DIR+0xba>
 24a:	82 2b       	or	r24, r18
 24c:	81 bb       	out	0x11, r24	; 17
 24e:	08 95       	ret
			}else{
				CLR_BIT(myDDRD,pinnum);
 250:	21 b3       	in	r18, 0x11	; 17
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <GPIO_vsetPIN_DIR+0xd4>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <GPIO_vsetPIN_DIR+0xd0>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	81 bb       	out	0x11, r24	; 17
 266:	08 95       	ret

00000268 <GPIO_vwrite_PIN>:
}

//====================================================================================================

void GPIO_vwrite_PIN(u8 portnum, u8 pinnum, u8 value){
	switch (portnum){
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	e1 54       	subi	r30, 0x41	; 65
 26e:	f1 09       	sbc	r31, r1
 270:	e4 32       	cpi	r30, 0x24	; 36
 272:	f1 05       	cpc	r31, r1
 274:	08 f0       	brcs	.+2      	; 0x278 <GPIO_vwrite_PIN+0x10>
 276:	67 c0       	rjmp	.+206    	; 0x346 <GPIO_vwrite_PIN+0xde>
 278:	e2 5b       	subi	r30, 0xB2	; 178
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__tablejump2__>
		case 'A' :
		case 'a' :
		if(value == 1){
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	59 f4       	brne	.+22     	; 0x29a <GPIO_vwrite_PIN+0x32>
			SET_BIT(myPORTA,pinnum);
 284:	2b b3       	in	r18, 0x1b	; 27
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <GPIO_vwrite_PIN+0x28>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <GPIO_vwrite_PIN+0x24>
 294:	82 2b       	or	r24, r18
 296:	8b bb       	out	0x1b, r24	; 27
 298:	08 95       	ret
			}else{
			CLR_BIT(myPORTA,pinnum);
 29a:	2b b3       	in	r18, 0x1b	; 27
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <GPIO_vwrite_PIN+0x3e>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <GPIO_vwrite_PIN+0x3a>
 2aa:	80 95       	com	r24
 2ac:	82 23       	and	r24, r18
 2ae:	8b bb       	out	0x1b, r24	; 27
 2b0:	08 95       	ret
		}
		break;
		case 'B' :
		case 'b' :
		if(value == 1){
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	59 f4       	brne	.+22     	; 0x2cc <GPIO_vwrite_PIN+0x64>
			SET_BIT(myPORTB,pinnum);
 2b6:	28 b3       	in	r18, 0x18	; 24
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_vwrite_PIN+0x5a>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_vwrite_PIN+0x56>
 2c6:	82 2b       	or	r24, r18
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	08 95       	ret
			}else{
			CLR_BIT(myPORTB,pinnum);
 2cc:	28 b3       	in	r18, 0x18	; 24
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <GPIO_vwrite_PIN+0x70>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <GPIO_vwrite_PIN+0x6c>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	08 95       	ret
		}
		break;
		case 'C' :
		case 'c' :
		if(value == 1){
 2e4:	41 30       	cpi	r20, 0x01	; 1
 2e6:	59 f4       	brne	.+22     	; 0x2fe <GPIO_vwrite_PIN+0x96>
			SET_BIT(myPORTC,pinnum);
 2e8:	25 b3       	in	r18, 0x15	; 21
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_vwrite_PIN+0x8c>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_vwrite_PIN+0x88>
 2f8:	82 2b       	or	r24, r18
 2fa:	85 bb       	out	0x15, r24	; 21
 2fc:	08 95       	ret
			}else{
			CLR_BIT(myPORTC,pinnum);
 2fe:	25 b3       	in	r18, 0x15	; 21
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <GPIO_vwrite_PIN+0xa2>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <GPIO_vwrite_PIN+0x9e>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	85 bb       	out	0x15, r24	; 21
 314:	08 95       	ret
		}
		break;
		case 'D' :
		case 'd' :
		if(value == 1){
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	59 f4       	brne	.+22     	; 0x330 <GPIO_vwrite_PIN+0xc8>
			SET_BIT(myPORTD,pinnum);
 31a:	22 b3       	in	r18, 0x12	; 18
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <GPIO_vwrite_PIN+0xbe>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <GPIO_vwrite_PIN+0xba>
 32a:	82 2b       	or	r24, r18
 32c:	82 bb       	out	0x12, r24	; 18
 32e:	08 95       	ret
			}else{
			CLR_BIT(myPORTD,pinnum);
 330:	22 b3       	in	r18, 0x12	; 18
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_vwrite_PIN+0xd4>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_vwrite_PIN+0xd0>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	82 bb       	out	0x12, r24	; 18
 346:	08 95       	ret

00000348 <TMR_voidInit>:
{
	SET_BIT	(SREG ,7 );
}
void TMR_voidDisableGIE (void)
{
	CLR_BIT	(SREG ,7 );
 348:	83 b7       	in	r24, 0x33	; 51
 34a:	8b 7f       	andi	r24, 0xFB	; 251
 34c:	83 bf       	out	0x33, r24	; 51
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	83 bf       	out	0x33, r24	; 51
 354:	83 b7       	in	r24, 0x33	; 51
 356:	8e 7f       	andi	r24, 0xFE	; 254
 358:	83 bf       	out	0x33, r24	; 51
 35a:	89 b7       	in	r24, 0x39	; 57
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	89 bf       	out	0x39, r24	; 57
 360:	89 b7       	in	r24, 0x39	; 57
 362:	8f 7e       	andi	r24, 0xEF	; 239
 364:	89 bf       	out	0x39, r24	; 57
 366:	89 b7       	in	r24, 0x39	; 57
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	89 bf       	out	0x39, r24	; 57
 36c:	8e b5       	in	r24, 0x2e	; 46
 36e:	8f 7e       	andi	r24, 0xEF	; 239
 370:	8e bd       	out	0x2e, r24	; 46
 372:	8e b5       	in	r24, 0x2e	; 46
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	8e bd       	out	0x2e, r24	; 46
 378:	8f b5       	in	r24, 0x2f	; 47
 37a:	8d 7f       	andi	r24, 0xFD	; 253
 37c:	8f bd       	out	0x2f, r24	; 47
 37e:	8f b5       	in	r24, 0x2f	; 47
 380:	8e 7f       	andi	r24, 0xFE	; 254
 382:	8f bd       	out	0x2f, r24	; 47
 384:	8e b5       	in	r24, 0x2e	; 46
 386:	83 60       	ori	r24, 0x03	; 3
 388:	8e bd       	out	0x2e, r24	; 46
 38a:	08 95       	ret

0000038c <TMR_s8SetTCNT>:
 38c:	9d bd       	out	0x2d, r25	; 45
 38e:	8c bd       	out	0x2c, r24	; 44
 390:	08 95       	ret

00000392 <TMR_voidEnableGIE>:
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
 398:	08 95       	ret

0000039a <TMR_voidSetCallBack>:
}

void TMR_voidSetCallBack(void (*ptrfunc)(void ))
{
	ptr = ptrfunc ;
 39a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <ptr+0x1>
 39e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ptr>
 3a2:	08 95       	ret

000003a4 <__vector_7>:
}

void __vector_7  (void)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	if (ptr != NULL )
 3c6:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptr>
 3ca:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptr+0x1>
 3ce:	30 97       	sbiw	r30, 0x00	; 0
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__vector_7+0x30>
	{
		ptr();
 3d2:	09 95       	icall
	}
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_8>:
void __vector_8 (void)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	if (ptr != NULL )
 418:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptr>
 41c:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptr+0x1>
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		ptr();
 424:	09 95       	icall
	}
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_9>:
void __vector_9 (void)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31

	ptr();
 46a:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptr>
 46e:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptr+0x1>
 472:	09 95       	icall
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_10>:
void __vector_10 (void)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	if (ptr != NULL )
 4b8:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptr>
 4bc:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptr+0x1>
 4c0:	30 97       	sbiw	r30, 0x00	; 0
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_10+0x30>
	{
		ptr();
 4c4:	09 95       	icall
	}
}
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__vector_11>:
void __vector_11 (void)
{
	if (ptr != NULL )
 4e8:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptr>
 4ec:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptr+0x1>
 4f0:	30 97       	sbiw	r30, 0x00	; 0
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__vector_11+0xe>
	{
		ptr();
 4f4:	09 95       	icall
 4f6:	08 95       	ret

000004f8 <__tablejump2__>:
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	05 90       	lpm	r0, Z+
 4fe:	f4 91       	lpm	r31, Z
 500:	e0 2d       	mov	r30, r0
 502:	09 94       	ijmp

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
